// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RelevancheSearchAPI.Data;

#nullable disable

namespace RelevancheSearchAPI.Migrations
{
    [DbContext(typeof(SearchDbContext))]
    partial class SearchDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RelevancheSearchAPI.Models.ArticleVectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("Vector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId")
                        .IsUnique();

                    b.ToTable("ArticleVectors");
                });

            modelBuilder.Entity("RelevancheSearchAPI.Models.ArticlesCosSim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId1")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId2")
                        .HasColumnType("int");

                    b.Property<double>("CosSimilarity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId1", "ArticleId2")
                        .IsUnique();

                    b.ToTable("ArticlesCosSims");
                });

            modelBuilder.Entity("RelevancheSearchAPI.Models.QuestionVectors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Vector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("QuestionVectors");
                });

            modelBuilder.Entity("RelevancheSearchAPI.Models.QuestionsCosSim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CosSimilarity")
                        .HasColumnType("float");

                    b.Property<int>("QuestionId1")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId1", "QuestionId2")
                        .IsUnique();

                    b.ToTable("QuestionsCosSims");
                });
#pragma warning restore 612, 618
        }
    }
}
